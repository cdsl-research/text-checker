KubernetesはGoogleが2014年にオープンソース化したプロジェクトのことをさす．Google社内で利用されていたコンテナクラスタマネージャBorgが基になって作成されたOSS(OpenSourceSoftware)である[1]．コンテナを管理するソフトウェアで，類似するソフトウェアはDockerSwarm,Mesosphereが挙げられる．KubernetesはGoogleやMicrosoftやAmazon，IBMやVMwareの様な大手の企業が環境を提供している．今，最も活発なコンテナ管理システムといえる．コンテナは，アプリケーションの(コンパイルされた)コードと，実行時に必要な依存関係をパッケージ化するための技術のことをさす．実行する各コンテナは再現性があり，依存関係を含めるた標準化は，どこで実行しても同じ動作が得られることを意味する．コンテナは基盤となるホストインフラからアプリケーションを切り離すことにより，さまざまなクラウドやOS環境下でのデプロイが容易になる技術である．コンテナが生まれた背景として，VM(VirtualMachine)がかなり大容量の計算リソースであることが挙げられる．VMは，物理的なハードウェアの上で動作するハイパーバイザの上で動作するOSのコピーであり，アプリケーションはその上で動作する．このため，VMはスピードやパフォーマンスに課題がある．コンテナはより軽量な計算リソースを生成するという問題を解決することを目指して誕生した．コンテナは，オペレーティングシステムの上にハイパーバイザーを持つことができる．つまり，物理マシンや仮想マシンにたくさんのコンテナを搭載することができる．これにより，非常に多くのスケーラビリティを得られることになる．また，コンテナは非常に軽量なため，開発者はPC上にコンテナを構築して，本番環境を再現することができる．開発者はそのコンテナに対してアプリケーションを構築して実行することができ，これらのコンテナを移動させることが可能になる．すなわち，どのような環境でも本番環境の再現が可能となることになる[2]．近年，ソフトウェアアーキテクチャの新しい用語として”マイクロサービス”がある．マイクロサービスアーキテクチャはNetflix,Spotify,Uberの様な様々なサービスで採用されている[3]．マイクロサービスを作成するためにコンテナとコンテナを管理するKubernetesがよく用いられている．マイクロサービスのアーキテクチャスタイルは単一のアプリケーションをサービスの集合体として開発するアプローチのことをさす[4]．それぞれが独自のプロセスで動作し，軽量なメカニズム，多くの場合はgetやpostの様なHTTPリソースを用いたAPIで通信を行う．今までのアプリケーションの変更サイクルは，アプリケーションの小さな部分に変更を加えた場合，システム全体を再構築してデプロイする必要があった．時間が経つにつれて，モジュール構造を維持するのは困難で，そのモジュール内の1つのモジュールにのみ影響を与えるはずの変更が他のモジュール構造を崩すこともある．さらにスケーリングにおいて，より大きなリソースを必要とする部分ではなく，アプリケーション全体に対する調整しかできなかった．このような問題から，マイクロサービスのアーキテクチャスタイルが生まれた．サービスが独立してデプロイ可能でスケーラブルであるだけではなく，各サービスのモジュールの境界がはっきりとしていて，異なるサービスを異なるプログラミング言語で記述することさえできる．また，マイクロサービスアーキテクチャはサービスごとに独立してデプロイされているため，異なるチームで管理することも可能となる?．Kubernetesは，コンテナ化されたワークロードやサービスを管理するための，ポータブルで拡張性のあるオープンソースのプラットフォームのことをさす．Kubernetesは分散システムを弾力的に実行するフレームワークを提供している．Kubernetesの特徴として以下が挙げられる．•サポートするアプリケーションの種類を制限しない•アプリケーションレベルの機能を組み込んで提供しないKubernetesは非常に多様なワークロードをサポートすることを目的としている．そのため，アプリケーションがコンテナで実行できるのであれば，Kubernetes上で問題なく実行できるようになっている．また，アプリケーションレベルの機能を組み込んでいない理由も同様で，多様なワークロードに対応するためあえて組み込まない選択肢を取っている．これらにより，弾力性を持ったシステムをkubernetesは維持し続けている。
